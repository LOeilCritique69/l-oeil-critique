# Nom du workflow qui appara√Ætra dans l'onglet "Actions" de votre d√©p√¥t GitHub
name: Ex√©cuter le Scraper de Bandes-Annonces

# Quand ce workflow doit s'ex√©cuter
on:
  # Permet de d√©clencher le workflow manuellement depuis l'interface GitHub
  workflow_dispatch:

  # D√©clenche le workflow automatiquement √† une heure sp√©cifique
  # Ici, il s'ex√©cutera tous les jours √† 03:00 du matin (UTC)
  # Vous pouvez ajuster cette fr√©quence. Pour plus d'informations sur les expressions cron: https://crontab.guru/
  schedule:
    - cron: '0 3 * * *' # min(0-59) hour(0-23) day_of_month(1-31) month(1-12) day_of_week(0-6)

  # (Optionnel) D√©clenche le workflow √† chaque push sur la branche 'main'
  # Utile pour tester rapidement votre workflow apr√®s des modifications.
  # Vous pouvez commenter cette section si vous ne voulez que le d√©clenchement programm√©.
  push:
    branches: [ main ]

jobs:
  run_scraper:
    # Le runner est l'environnement virtuel o√π votre script sera ex√©cut√©.
    # ubuntu-latest est un bon choix pour les scripts Python.
    runs-on: ubuntu-latest

    steps:
    - name: Checkout du code
      # Cette action est essentielle. Elle t√©l√©charge le contenu de votre d√©p√¥t
      # sur le runner, ce qui permet √† votre workflow d'acc√©der √† votre script.
      uses: actions/checkout@v4
      with:
        # Important : Ce token permet au workflow de committer et pousser des changements
        # si votre script modifie des fichiers (comme sauvegarder les donn√©es scrap√©es).
        # C'est un secret fourni automatiquement par GitHub.
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configuration de Python
      # Configure l'environnement Python sur le runner.
      # Remplacez '3.x' par la version de Python que votre script utilise.
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Par exemple, '3.10', '3.11', '3.12'

    - name: Installation des d√©pendances Python
      # Si votre script Python utilise des biblioth√®ques externes (comme requests, BeautifulSoup, Selenium, etc.),
      # vous devez les installer ici.
      # Assurez-vous d'avoir un fichier `requirements.txt` √† la racine de votre projet
      # listant toutes ces d√©pendances.
      run: |
        python -m pip install --upgrade pip
        # Installe les d√©pendances list√©es dans requirements.txt
        # Si vous n'avez pas ce fichier, commentez la ligne suivante.
        pip install -r requirements.txt

    - name: Ex√©cution du script de scraping
      # C'est la commande qui lance votre script Python.
      # Assurez-vous que le chemin est correct.
      # Si votre script est √† la racine :
      run: python scrape_bandes_annonces.py
      # Si votre script est dans un dossier 'scripts' :
      # run: python scripts/scrape_bandes_annonces.py

    - name: Commit automatique des changements (si le scraper g√©n√®re des fichiers)
      # Cette action est utile si votre scraper sauvegarde les donn√©es (par exemple, dans un fichier JSON).
      # Elle d√©tecte les nouveaux fichiers ou les modifications, les committe et les pousse.
      #
      # Remplacez 'data/*.json' par le chemin des fichiers que votre scraper cr√©e ou met √† jour.
      # Par exemple, si votre scraper met √† jour 'output.json' √† la racine, utilisez 'output.json'.
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ü§ñ Donn√©es de bandes-annonces mises √† jour automatiquement [skip ci]"
        files: "data/*.json" # Exemple : surveille tous les JSON dans un dossier 'data'
        commit_author: "GitHub Actions <actions@github.com>"
        commit_user_email: "actions@github.com"
        skip_dirty_check: false # Force la v√©rification des changements m√™me si le dernier commit est r√©cent